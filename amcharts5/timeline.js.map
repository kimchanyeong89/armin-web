{"version":3,"file":"timeline.js","mappings":"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","sources":["webpack://@amcharts/amcharts5/./src/.internal/charts/timeline/AxisRendererCurveX.ts","webpack://@amcharts/amcharts5/./src/.internal/charts/timeline/AxisRendererCurveY.ts","webpack://@amcharts/amcharts5/./src/.internal/charts/timeline/CurveDefaultTheme.ts","webpack://@amcharts/amcharts5/./src/.internal/charts/timeline/CurveChart.ts","webpack://@amcharts/amcharts5/./src/.internal/charts/timeline/SerpentineChart.ts","webpack://@amcharts/amcharts5/./src/.internal/charts/timeline/SpiralChart.ts","webpack://@amcharts/amcharts5/./src/.internal/charts/timeline/CurveColumnSeries.ts","webpack://@amcharts/amcharts5/./src/.internal/charts/timeline/CurveLineSeries.ts","webpack://@amcharts/amcharts5/./src/.internal/charts/timeline/CurveCursor.ts","webpack://@amcharts/amcharts5/./tmp/webpack/timeline.js"],"sourcesContent":["import type { CurveChart } from \"./CurveChart\";\nimport type { Grid } from \"../xy/axes/Grid\";\nimport type { IPoint } from \"../../core/util/IPoint\";\nimport type { AxisTick } from \"../xy/axes/AxisTick\";\nimport type { AxisBullet } from \"../xy/axes/AxisBullet\";\nimport type { Tooltip } from \"../../core/render/Tooltip\";\nimport type { AxisRendererCurveY } from \"./AxisRendererCurveY\";\n\nimport { Slice } from \"../../core/render/Slice\";\nimport { AxisRenderer, IAxisRendererSettings, IAxisRendererPrivate } from \"../xy/axes/AxisRenderer\";\nimport { AxisLabel } from \"../xy/axes/AxisLabel\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { Template } from \"../../core/util/Template\";\n\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $math from \"../../core/util/Math\";\nimport * as $array from \"../../core/util/Array\";\n\nexport interface IAxisRendererCurveXSettings extends IAxisRendererSettings {\n\t/**\n\t * Array of control points to draw axis along.\n\t */\n\tpoints?: Array<IPoint>;\n\n\t/**\n\t * Y renderer of a Y axis. Must be defined!\n\t */\n\tyRenderer: AxisRendererCurveY;\n\n\t/**\n\t * If labels rotation should be adjusted to the axis rotation\n\t */\n\trotateLabels?: boolean;\n}\n\nexport interface IAxisRendererCurveXPrivate extends IAxisRendererPrivate {\n\tscale?: number;\n\tcenterX?: number;\n\tcenterY?: number;\n\taxisLength?: number;\n\tautoScale?: boolean;\n}\n\n/**\n * Renderer for [[CurveChart]] \"horizontal\" axes.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/timeline/} for more info\n * @since 5.12.0\n * @important\n */\nexport class AxisRendererCurveX extends AxisRenderer {\n\n\t/**\n\t * Chart this renderer is for.\n\t */\n\tdeclare public chart: CurveChart | undefined;\n\n\t/**\n\t * A list of labels in the axis.\n\t *\n\t * `labels.template` can be used to configure labels.\n\t *\n\t * @default new ListTemplate<AxisLabelRadial>\n\t */\n\tpublic readonly labels: ListTemplate<AxisLabel> = this.addDisposer(new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => AxisLabel._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.labels.template.get(\"themeTags\", []), this.get(\"themeTags\", []))\n\t\t}, [this.labels.template])\n\t));\n\n\n\t/**\n\t * A list of fills in the axis.\n\t *\n\t * `axisFills.template` can be used to configure axis fills.\n\t *\n\t * @default new ListTemplate<Slice>\n\t */\n\tpublic readonly axisFills: ListTemplate<Slice> = this.addDisposer(new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => Slice._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.axisFills.template.get(\"themeTags\", [\"fill\"]), this.get(\"themeTags\", []))\n\t\t}, [this.axisFills.template])\n\t));\n\n\n\tpublic static className: string = \"AxisRendererCurveX\";\n\tpublic static classNames: Array<string> = AxisRenderer.classNames.concat([AxisRendererCurveX.className]);\n\n\tdeclare public _settings: IAxisRendererCurveXSettings;\n\tdeclare public _privateSettings: IAxisRendererCurveXPrivate;\n\n\tpublic pointPostion: Array<number> = [];\n\n\tpublic pointDistance: Array<number> = [];\n\n\tprotected _normalizedPoints: Array<IPoint> = [];\n\n\tpublic _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"renderer\", \"circular\"]);\n\t\tsuper._afterNew();\n\t\tthis.setPrivateRaw(\"letter\", \"X\");\n\t\tthis.setRaw(\"position\", \"absolute\");\n\t}\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"points\")) {\n\t\t\tthis._updateLayout();\n\t\t}\n\n\t\tif (this.isDirty(\"yRenderer\")) {\n\t\t\tconst yRenderer = this.get(\"yRenderer\");\n\t\t\tyRenderer.set(\"xRenderer\", this);\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic processAxis() {\n\t\tsuper.processAxis();\n\t\tconst axis = this.axis;\n\t\taxis.labelsContainer.set(\"isMeasured\", false);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic _updateLayout() {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\tconst points = this.get(\"points\");\n\n\t\t\tif (points) {\n\t\t\t\t// find extreme points\n\t\t\t\tlet minX = Infinity;\n\t\t\t\tlet minY = Infinity;\n\t\t\t\tlet maxX = -Infinity;\n\t\t\t\tlet maxY = -Infinity;\n\n\t\t\t\tlet axisLength = 0;\n\n\t\t\t\tlet prevPoint = points[0];\n\n\t\t\t\t$array.each(points, (point, i) => {\n\t\t\t\t\tminX = Math.min(minX, point.x);\n\t\t\t\t\tminY = Math.min(minY, point.y);\n\t\t\t\t\tmaxX = Math.max(maxX, point.x);\n\t\t\t\t\tmaxY = Math.max(maxY, point.y);\n\t\t\t\t\taxisLength += Math.hypot(point.x - prevPoint.x, point.y - prevPoint.y);\n\t\t\t\t\tthis.pointDistance[i] = axisLength;\n\t\t\t\t\tprevPoint = point;\n\t\t\t\t});\n\n\t\t\t\t$array.each(points, (_p, i) => {\n\t\t\t\t\tthis.pointPostion[i] = this.pointDistance[i] / axisLength;\n\t\t\t\t});\n\n\t\t\t\tlet yAxisLenght = this.get(\"yRenderer\").get(\"axisLength\", 0);\n\t\t\t\tlet aw = maxX - minX + 2 * yAxisLenght;\n\t\t\t\tlet ah = maxY - minY + 2 * yAxisLenght;\t\n\n\t\t\t\t// calculate center\n\t\t\t\tlet centerX = (minX + maxX) / 2;\n\t\t\t\tlet centerY = (minY + maxY) / 2;\n\n\t\t\t\t// take width and height of a chart\n\t\t\t\tlet width = chart.innerWidth();\n\t\t\t\tlet height = chart.innerHeight();\n\n\t\t\t\t// calculate scale\n\t\t\t\tlet scaleX = width / aw;\n\t\t\t\tlet scaleY = height / ah;\n\n\t\t\t\t// calculate scale\n\t\t\t\tlet scale = Math.min(scaleX, scaleY);\n\n\t\t\t\tif (!this.getPrivate(\"autoScale\", true)) {\n\t\t\t\t\tscale = 1;\n\t\t\t\t}\n\n\t\t\t\tthis.axis.setPrivateRaw(\"width\", aw * scale);\n\t\t\t\tthis.axis.setPrivateRaw(\"height\", ah * scale);\n\t\t\t\tthis.setPrivateRaw(\"centerX\", centerX);\n\t\t\t\tthis.setPrivateRaw(\"centerY\", centerY);\n\t\t\t\tthis.setPrivateRaw(\"scale\", scale);\n\t\t\t\tthis.setPrivateRaw(\"axisLength\", axisLength);\n\n\t\t\t\tthis.set(\"draw\", (display) => {\n\t\t\t\t\tdisplay.moveTo((points[0].x - centerX) * scale, (points[0].y - centerY) * scale);\n\t\t\t\t\t$array.each(points, (point) => {\n\t\t\t\t\t\tdisplay.lineTo((point.x - centerX) * scale, (point.y - centerY) * scale);\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tprevPoint = points[0];\n\n\t\t\t\tthis._normalizedPoints = [];\n\t\t\t\t$array.each(points, (point) => {\n\t\t\t\t\tlet distance = Math.hypot(point.x - prevPoint.x, point.y - prevPoint.y);\n\t\t\t\t\tfor (let i = 1; i < distance; i++) {\n\t\t\t\t\t\tlet x = ((prevPoint.x + (point.x - prevPoint.x) * i / distance) - centerX) * scale;\n\t\t\t\t\t\tlet y = ((prevPoint.y + (point.y - prevPoint.y) * i / distance) - centerY) * scale;\n\n\t\t\t\t\t\t// check distance to previous normalized point\n\t\t\t\t\t\tconst prevNormalized = this._normalizedPoints[this._normalizedPoints.length - 1];\n\t\t\t\t\t\tif (prevNormalized) {\n\t\t\t\t\t\t\tlet distance = Math.hypot(x - prevNormalized.x, y - prevNormalized.y);\n\t\t\t\t\t\t\tif (distance < .5) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._normalizedPoints.push({ x: x, y: y });\n\t\t\t\t\t}\n\t\t\t\t\tprevPoint = point;\n\t\t\t\t})\n\n\t\t\t\tthis.axis.markDirtySize();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateGrid(grid?: Grid, position?: number, endPosition?: number) {\n\t\tif (grid) {\n\t\t\tif (position == null) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = grid.get(\"location\", 0.5);\n\t\t\tif (endPosition != null && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tthis.toggleVisibility(grid, position, 0, 1);\n\n\t\t\tconst p0 = this.positionToPoint(position, 0);\n\t\t\tconst p1 = this.positionToPoint(position, 1);\n\n\t\t\tgrid.set(\"draw\", (display) => {\n\t\t\t\tdisplay.moveTo(p0.x, p0.y);\n\t\t\t\tdisplay.lineTo(p1.x, p1.y);\n\t\t\t})\n\t\t}\n\t}\n\n\t/**\n\t * Converts relative position to angle.\n\t *\n\t * @param   position  Position\n\t * @return            Angle\n\t */\n\tpublic positionToAngle(position: number): number {\n\n\t\tposition = this.toGlobalPosition(position);\n\n\t\tlet points = this.get(\"points\");\n\t\tlet axisLength = this.getPrivate(\"axisLength\", 0);\n\t\tlet angle = 0;\n\n\t\t// find which segment the position is in\n\t\tif (points) {\n\t\t\tlet totalLength = 0;\n\t\t\tlet prevPoint = points[0];\n\n\t\t\t$array.eachContinue(points, (point) => {\n\t\t\t\tlet segmentLength = Math.hypot(point.x - prevPoint.x, point.y - prevPoint.y);\n\t\t\t\ttotalLength += segmentLength;\n\t\t\t\tif (totalLength > position * axisLength) {\n\t\t\t\t\tangle = $math.getAngle(prevPoint, point) + 90;\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t\tprevPoint = point;\n\t\t\t\treturn true;\n\t\t\t})\n\n\t\t}\n\n\t\treturn angle;\n\t}\n\n\tpublic getPoints(positionX: number, positionY: number, endPositionX: number, endPositionY: number) {\n\t\tlet yRenderer = this.get(\"yRenderer\");\n\t\tlet points = [];\n\n\t\tif (positionX > endPositionX) {\n\t\t\t[positionX, endPositionX] = [endPositionX, positionX];\n\t\t}\n\n\t\tif (positionY > endPositionY) {\n\t\t\t[positionY, endPositionY] = [endPositionY, positionY];\n\t\t}\n\n\t\tif (yRenderer) {\n\t\t\tlet indexStart = this.positionToIndex(positionX);\n\t\t\tlet indexEnd = this.positionToIndex(endPositionX);\n\n\t\t\tpoints.push(this.positionToPoint(positionX, positionY));\n\n\t\t\tfor (let i = indexStart; i <= indexEnd + 1; i++) {\n\t\t\t\tlet position = this.indexToPosition(i);\n\t\t\t\tif (position > positionX && position < endPositionX) {\n\t\t\t\t\tpoints.push(this.positionToPoint(position, positionY));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpoints.push(this.positionToPoint(endPositionX, positionY));\n\n\t\t\tif (endPositionY != positionY) {\n\t\t\t\tpoints.push(this.positionToPoint(endPositionX, endPositionY));\n\t\t\t\tfor (let i = indexEnd + 1; i >= indexStart; i--) {\n\t\t\t\t\tlet position = this.indexToPosition(i);\n\t\t\t\t\tif (position > positionX && position < endPositionX) {\n\t\t\t\t\t\tpoints.push(this.positionToPoint(position, endPositionY));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpoints.push(this.positionToPoint(positionX, endPositionY));\n\t\t\t\tpoints.push(points[0]);\n\t\t\t}\n\t\t}\n\n\t\treturn points;\n\t}\n\n\t// do not delete\n\tprotected _handleOpposite() { }\n\n\n\tpublic positionToIndex(position: number): number {\n\t\tlet points = this.get(\"points\");\n\t\tlet axisLength = this.getPrivate(\"axisLength\", 0);\n\t\tlet index = 0;\n\n\t\tposition = this.toGlobalPosition(position);\n\n\t\tif (points && points.length > 1) {\n\t\t\tlet totalLength = 0;\n\t\t\tlet prevPoint = points[0];\n\n\t\t\tif (position <= 0) {\n\t\t\t\tindex = 0;\n\t\t\t}\n\t\t\telse if (position >= 1) {\n\t\t\t\tconst len = points.length\n\t\t\t\tindex = len - 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlet i = 0;\n\t\t\t\t$array.eachContinue(points, (point) => {\n\t\t\t\t\tlet segmentLength = Math.hypot(point.x - prevPoint.x, point.y - prevPoint.y);\n\t\t\t\t\ttotalLength += segmentLength;\n\t\t\t\t\tif (totalLength >= position * axisLength) {\n\t\t\t\t\t\tindex = i;\n\t\t\t\t\t\treturn false\n\t\t\t\t\t}\n\t\t\t\t\tprevPoint = point;\n\t\t\t\t\ti++;\n\t\t\t\t\treturn true;\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\treturn index;\n\t}\n\n\tpublic indexToPosition(index: number): number {\n\t\tlet points = this.get(\"points\");\n\t\tlet axisLength = this.getPrivate(\"axisLength\", 0);\n\t\tlet position = 0;\n\n\t\tif (points && points.length > 1) {\n\t\t\tlet totalLength = 0;\n\t\t\tlet prevPoint = points[0];\n\n\t\t\tlet i = 0;\n\t\t\t$array.eachContinue(points, (point) => {\n\t\t\t\tposition = totalLength / axisLength;\n\t\t\t\tif (i == index) {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t\tlet segmentLength = Math.hypot(point.x - prevPoint.x, point.y - prevPoint.y);\n\t\t\t\ttotalLength += segmentLength;\n\t\t\t\tprevPoint = point;\n\t\t\t\ti++;\n\t\t\t\treturn true;\n\t\t\t})\n\t\t}\n\n\t\treturn this.toAxisPosition(position);\n\t}\n\n\tpublic pointToPosition(point: IPoint): IPoint {\n\t\tlet minDistance = Infinity;\n\t\tlet index = 0;\n\t\tlet prevPoint = this._normalizedPoints[0];\n\t\tlet angle = 0;\n\t\t$array.each(this._normalizedPoints, (normalizedPoint, i) => {\n\t\t\tlet distance = Math.hypot(normalizedPoint.x - point.x, normalizedPoint.y - point.y);\n\t\t\tif (distance < minDistance) {\n\t\t\t\tminDistance = distance;\n\t\t\t\tindex = i;\n\t\t\t\tangle = $math.getAngle(point, normalizedPoint) - $math.getAngle(prevPoint, normalizedPoint);\n\t\t\t}\n\t\t\tprevPoint = normalizedPoint;\n\t\t})\n\n\t\tconst yRenderer = this.get(\"yRenderer\");\n\t\tconst scale = this.getPrivate(\"scale\", 1);\n\t\tconst rendererY = this.get(\"yRenderer\");\n\n\t\tconst y = -minDistance / (yRenderer.get(\"axisLength\", 0) * scale) * $math.sin(angle) + rendererY.get(\"axisLocation\", 0);\n\t\treturn { x: index / this._normalizedPoints.length, y: y };\n\t}\n\n\n\t/**\n\t * Converts relative position to an X/Y coordinate.\n\t *\n\t * @param   position  Position\n\t * @return            Point\n\t */\n\tpublic positionToPoint(position: number, positionY?: number, doNotFix?: boolean): IPoint {\n\n\t\tif (positionY == undefined) {\n\t\t\tpositionY = 0;\n\t\t}\n\n\t\tconst rendererY = this.get(\"yRenderer\");\n\t\tif (!doNotFix) {\n\t\t\tposition = this.toGlobalPosition(position);\n\t\t}\n\t\tpositionY = rendererY.toGlobalPosition(positionY);\n\t\tpositionY -= rendererY.get(\"axisLocation\", 0);\n\n\t\tlet points = this.get(\"points\");\n\t\tlet axisLength = this.getPrivate(\"axisLength\", 0);\n\t\tlet scale = this.getPrivate(\"scale\", 1);\n\t\tlet pointOfPosition: IPoint = { x: 0, y: 0 };\n\t\tlet angle = 0;\n\n\t\t// find which segment the position is in\n\t\tif (points && points.length > 1) {\n\t\t\tlet totalLength = 0;\n\t\t\tlet prevPoint = points[0];\n\n\t\t\tif (position <= 0) {\n\t\t\t\tangle = $math.getAngle(points[0], points[1]) + 90;\n\t\t\t\tpointOfPosition = points[0];\n\t\t\t}\n\t\t\telse if (position >= 1) {\n\t\t\t\tconst len = points.length;\n\t\t\t\tangle = $math.getAngle(points[len - 2], points[len - 1]) + 90;\n\t\t\t\tpointOfPosition = points[len - 1];\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$array.eachContinue(points, (point) => {\n\t\t\t\t\tlet segmentLength = Math.hypot(point.x - prevPoint.x, point.y - prevPoint.y);\n\t\t\t\t\ttotalLength += segmentLength;\n\t\t\t\t\tif (totalLength >= position * axisLength) {\n\t\t\t\t\t\tlet segementStartPosition = (totalLength - segmentLength) / axisLength;\n\t\t\t\t\t\tlet segmentPosition = (position * axisLength - segementStartPosition * axisLength) / segmentLength;\n\n\t\t\t\t\t\tpointOfPosition = { x: prevPoint.x + (point.x - prevPoint.x) * segmentPosition, y: prevPoint.y + (point.y - prevPoint.y) * segmentPosition };\n\t\t\t\t\t\tangle = $math.getAngle(prevPoint, point) + 90;\n\t\t\t\t\t\treturn false\n\t\t\t\t\t}\n\t\t\t\t\tprevPoint = point;\n\t\t\t\t\treturn true;\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\tlet centerX = this.getPrivate(\"centerX\", 0);\n\t\tlet centerY = this.getPrivate(\"centerY\", 0);\n\n\t\tlet axisX = (pointOfPosition.x - centerX) * scale;\n\t\tlet axisY = (pointOfPosition.y - centerY) * scale;\n\n\t\tif (positionY == null) {\n\t\t\tpositionY = 0;\n\t\t}\n\n\t\tlet lengthY = -rendererY.get(\"axisLength\", 0);\n\n\t\tlet dy = lengthY * positionY * scale;\n\n\t\tlet x = axisX + $math.cos(angle) * dy;\n\t\tlet y = axisY + $math.sin(angle) * dy;\n\n\t\treturn { x: x, y: y };\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLabel(label?: AxisLabel, position?: number, endPosition?: number, count?: number) {\n\t\tif (label) {\n\t\t\tif (position == null) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = 0.5;\n\t\t\tif (count != null && count > 1) {\n\t\t\t\tlocation = label.get(\"multiLocation\", location);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlocation = label.get(\"location\", location);\n\t\t\t}\n\n\t\t\tif (endPosition != null && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tconst angle = this.positionToAngle(position);\n\n\t\t\tconst rendererY = this.get(\"yRenderer\");\n\t\t\tconst axisY = rendererY.axis;\n\n\t\t\tconst point = this.positionToPoint(position, axisY.get(\"start\", 0) + rendererY.get(\"axisLocation\", 0));\n\n\t\t\tlabel.setAll({\n\t\t\t\tx: point.x,\n\t\t\t\ty: point.y\n\t\t\t});\n\n\t\t\tif (this.get(\"rotateLabels\", true)) {\n\t\t\t\tlabel.set(\"rotation\", angle - 90);\n\t\t\t}\n\n\t\t\tthis.toggleVisibility(label, position, label.get(\"minPosition\", 0), label.get(\"maxPosition\", 1));\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateTick(tick?: AxisTick, position?: number, endPosition?: number, count?: number) {\n\t\tif (tick) {\n\t\t\tif (position == null) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = 0.5;\n\t\t\tif (count != null && count > 1) {\n\t\t\t\tlocation = tick.get(\"multiLocation\", location);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlocation = tick.get(\"location\", location);\n\t\t\t}\n\n\t\t\tif (endPosition != null && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tlet length = tick.get(\"length\", 0);\n\t\t\tconst inside = tick.get(\"inside\");\n\n\t\t\tif (inside) {\n\t\t\t\tlength *= -1;\n\t\t\t}\n\n\t\t\tlet angle = this.positionToAngle(position);\n\n\t\t\tthis.toggleVisibility(tick, position, tick.get(\"minPosition\", 0), tick.get(\"maxPosition\", 1));\n\n\t\t\tconst rendererY = this.get(\"yRenderer\");\n\t\t\tconst axisY = rendererY.axis;\n\n\t\t\tconst point = this.positionToPoint(position, axisY.get(\"start\"));\n\n\t\t\ttick.set(\"draw\", (display) => {\n\t\t\t\tdisplay.moveTo(point.x, point.y);\n\t\t\t\tdisplay.lineTo(point.x - length * $math.cos(angle), point.y - length * $math.sin(angle));\n\t\t\t})\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateBullet(bullet?: AxisBullet, position?: number, endPosition?: number) {\n\t\tif (bullet) {\n\t\t\tconst sprite = bullet.get(\"sprite\");\n\n\n\t\t\tif (sprite) {\n\t\t\t\tif (position == null) {\n\t\t\t\t\tposition = 0;\n\t\t\t\t}\n\n\t\t\t\tlet location = bullet.get(\"location\", 0.5);\n\t\t\t\tif (endPosition != null && endPosition != position) {\n\t\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t\t}\n\n\t\t\t\tconst rendererY = this.get(\"yRenderer\");\n\t\t\t\tconst axisY = rendererY.axis;\n\n\t\t\t\tconst point = this.positionToPoint(position, axisY.get(\"start\"));\n\t\t\t\tsprite.setAll({ x: point.x, y: point.y });\n\n\t\t\t\tthis.toggleVisibility(sprite, position, 0, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateFill(fill?: Slice, position?: number, endPosition?: number) {\n\t\tif (fill) {\n\t\t\tif (position == null) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\t\t\tif (endPosition == null) {\n\t\t\t\tendPosition = 1;\n\t\t\t}\n\n\t\t\tconst yRenderer = this.get(\"yRenderer\");\n\t\t\tconst yAxis = yRenderer.axis\n\n\t\t\tconst points = this.getPoints(position, yAxis.get(\"start\", 0), endPosition, yAxis.get(\"end\", 1));\n\n\t\t\tfill.set(\"draw\", (display) => {\n\t\t\t\tdisplay.moveTo(points[0].x, points[0].y);\n\t\t\t\t$array.each(points, (point) => {\n\t\t\t\t\tdisplay.lineTo(point.x, point.y);\n\t\t\t\t})\n\t\t\t\tdisplay.closePath();\n\t\t\t})\n\t\t}\n\t}\n\n\n\t/**\n\t * Returns axis length in pixels.\n\t *\n\t * @return Length\n\t */\n\tpublic axisLength(): number {\n\t\treturn this.getPrivate(\"axisLength\", 0);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic positionTooltip(tooltip: Tooltip, position: number) {\n\t\tconst yRenderer = this.get(\"yRenderer\");\n\t\tconst start = yRenderer.axis.get(\"start\", 0);\n\t\tconst end = yRenderer.axis.get(\"end\", 1);\n\t\tconst point = this.positionToPoint(position, yRenderer.get(\"axisLocation\", 0.5) * (end - start) + start);\n\t\tthis._positionTooltip(tooltip, point);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateTooltipBounds(_tooltip: Tooltip) {\n\n\t}\n}\n","import type { CurveChart } from \"./CurveChart\";\nimport type { Grid } from \"../xy/axes/Grid\";\nimport type { IPoint } from \"../../core/util/IPoint\";\nimport type { Graphics } from \"../../core/render/Graphics\";\nimport type { AxisTick } from \"../xy/axes/AxisTick\";\nimport type { AxisBullet } from \"../xy/axes/AxisBullet\";\nimport type { Tooltip } from \"../../core/render/Tooltip\";\nimport type { AxisRendererCurveX } from \"./AxisRendererCurveX\";\n\nimport { AxisRenderer, IAxisRendererSettings, IAxisRendererPrivate } from \"../xy/axes/AxisRenderer\";\nimport { AxisLabelRadial } from \"../xy/axes/AxisLabelRadial\";\nimport { arc } from \"d3-shape\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { Template } from \"../../core/util/Template\";\n\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $type from \"../../core/util/Type\";\nimport * as $math from \"../../core/util/Math\";\nimport * as $array from \"../../core/util/Array\";\n\nexport interface IAxisRendererCurveYSettings extends IAxisRendererSettings {\n\n\t/**\n\t * Axis length in pixels.\n\t * \n\t * [[SerpentineChart]] and [[SpiralChart]] will ignore this setting as they\n\t * calculate axis length by the `yAxisRadius` setting of a chart itself.\n\t *\n\t * @default 60\n\t */\n\taxisLength?: number;\n\n\t/**\n\t * X-axis renderer.\n\t *\n\t * This setting is required.\n\t */\n\txRenderer?: AxisRendererCurveX;\n\n\t/**\n\t* Relative location of the axis on the chart: 0-1.\n\t*\n\t* * `0` - start\n\t* * `1` - end\n\t*\n\t* @default 0.5\n\t*/\n\taxisLocation?: number;\n\t\n\t/**\n\t * Should axis labels rotation should be adjusted to the axis rotation?\n\t *\n\t * @default false\n\t */\n\trotateLabels?: boolean;\n\n}\n\nexport interface IAxisRendererCurveYPrivate extends IAxisRendererPrivate {\n}\n\n/**\n * Renderer for [[CurveChart]] \"vertical\" axes.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/timeline/} for more info\n * @since 5.12.0\n * @important\n */\nexport class AxisRendererCurveY extends AxisRenderer {\n\n\t/**\n\t * Chart this renderer is for.\n\t */\n\tdeclare public chart: CurveChart | undefined;\n\n\tpublic static className: string = \"AxisRendererCurveY\";\n\tpublic static classNames: Array<string> = AxisRenderer.classNames.concat([AxisRendererCurveY.className]);\n\n\tdeclare public _settings: IAxisRendererCurveYSettings;\n\tdeclare public _privateSettings: IAxisRendererCurveYPrivate;\n\n\tprotected _fillGenerator = arc();\n\n\t/**\n\t * A [[TemplateList]] with all the labels attached to the axis.\n\t *\n\t * `labels.template` can be used to configure appearance of the labels.\n\t *\n\t * @default new ListTemplate<AxisLabelRadial>\n\t */\n\tpublic readonly labels: ListTemplate<AxisLabelRadial> = this.addDisposer(new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => AxisLabelRadial._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.labels.template.get(\"themeTags\", []), this.get(\"themeTags\", []))\n\t\t}, [this.labels.template])\n\t));\n\n\tpublic _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"renderer\", \"radial\"]);\n\t\tsuper._afterNew();\n\t\tthis.setPrivate(\"letter\", \"Y\");\n\t\tthis.setRaw(\"position\", \"absolute\");\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this.isDirty(\"axisLength\")) {\n\t\t\tthis.updateLayout();\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic processAxis() {\n\t\tsuper.processAxis();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLayout() {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\tconst p0 = this.positionToPoint(0, 0);\n\t\t\tconst p1 = this.positionToPoint(1, 0);\n\n\t\t\t// draw axis\n\t\t\tthis.set(\"draw\", (display) => {\n\t\t\t\tdisplay.moveTo(p0.x, p0.y);\n\t\t\t\tdisplay.lineTo(p1.x, p1.y);\n\t\t\t})\n\n\t\t\tthis.axis.markDirtySize();\n\t\t\tchart._updateMasks();\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateGrid(grid?: Grid, position?: number, endPosition?: number) {\n\t\tif (grid) {\n\n\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = grid.get(\"location\", 0.5);\n\t\t\tif ($type.isNumber(endPosition) && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tthis.toggleVisibility(grid, position, 0, 1);\n\n\t\t\tlet xRenderer = this.get(\"xRenderer\")!;\n\t\t\tif (xRenderer) {\n\t\t\t\tconst points = xRenderer.get(\"points\");\n\t\t\t\tif (points) {\n\t\t\t\t\tgrid.set(\"draw\", (display) => {\n\t\t\t\t\t\tlet previousPoint: IPoint | undefined;\n\t\t\t\t\t\t$array.each(points, (_point, index) => {\n\t\t\t\t\t\t\tlet pointPostion = xRenderer.pointPostion[index];\n\t\t\t\t\t\t\tlet p = this.positionToPoint(position!, pointPostion, true);\n\n\t\t\t\t\t\t\tif (index == 0) {\n\t\t\t\t\t\t\t\tdisplay.moveTo(p.x, p.y);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t// if distance between previous and current is very small, we skip it\n\t\t\t\t\t\t\t\tif (previousPoint && Math.hypot(previousPoint.x - p.x, previousPoint.y - p.y) < .5) {\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tdisplay.lineTo(p.x, p.y);\n\t\t\t\t\t\t\t\t\tpreviousPoint = p;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\n\n\t// do not delete\n\tprotected _handleOpposite() { }\n\n\t/**\n\t * Converts relative position to X/Y point.\n\t *\n\t * @param   position  Position\n\t * @return            Point\n\t */\n\tpublic positionToPoint(position: number, positionX?: number, doNotFix?: boolean): IPoint {\n\t\tif (positionX == undefined) {\n\t\t\tpositionX = 0;\n\t\t}\n\n\t\tconst xRenderer = this.get(\"xRenderer\");\n\t\tif (xRenderer) {\n\t\t\treturn xRenderer.positionToPoint(positionX, position, doNotFix)\n\t\t}\n\t\treturn { x: 0, y: 0 };\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLabel(label?: AxisLabelRadial, position?: number, endPosition?: number, count?: number) {\n\t\tif (label) {\n\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = 0.5;\n\t\t\tif ($type.isNumber(count) && count > 1) {\n\t\t\t\tlocation = label.get(\"multiLocation\", location);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlocation = label.get(\"location\", location);\n\t\t\t}\n\n\t\t\tif ($type.isNumber(endPosition) && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tconst point = this.positionToPoint(position, 0);\n\t\t\tconst xRenderer = this.get(\"xRenderer\");\n\t\t\tif (xRenderer) {\n\t\t\t\tlet angle = 0;\n\t\t\t\tif (xRenderer) {\n\t\t\t\t\tangle = xRenderer.positionToAngle(0) - 90;\n\t\t\t\t}\n\t\t\t\tlabel.setAll({\n\t\t\t\t\tx: point.x,\n\t\t\t\t\ty: point.y\n\t\t\t\t});\n\n\t\t\t\tif(this.get(\"rotateLabels\", true)){\n\t\t\t\t\tlabel.set(\"rotation\", angle);\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\n\t\t\tthis.toggleVisibility(label, position, label.get(\"minPosition\", 0), label.get(\"maxPosition\", 1));\n\t\t}\n\t}\n\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateTick(tick?: AxisTick, position?: number, endPosition?: number, count?: number) {\n\t\tif (tick) {\n\n\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = 0.5;\n\t\t\tif ($type.isNumber(count) && count > 1) {\n\t\t\t\tlocation = tick.get(\"multiLocation\", location);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlocation = tick.get(\"location\", location);\n\t\t\t}\n\n\t\t\tif ($type.isNumber(endPosition) && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tconst point = this.positionToPoint(position, 0);\n\t\t\tconst xRenderer = this.get(\"xRenderer\");\n\t\t\tif (xRenderer) {\n\t\t\t\tlet angle = 0;\n\t\t\t\tif (xRenderer) {\n\t\t\t\t\tangle = xRenderer.positionToAngle(0) - 90;\n\t\t\t\t}\n\n\t\t\t\tlet length = tick.get(\"length\", 0);\n\t\t\t\tconst inside = tick.get(\"inside\");\n\n\t\t\t\tif (inside) {\n\t\t\t\t\tlength *= -1\n\t\t\t\t}\n\n\t\t\t\ttick.set(\"draw\", (display) => {\n\t\t\t\t\tdisplay.moveTo(point.x, point.y);\n\t\t\t\t\tdisplay.lineTo(point.x + length * $math.cos(angle), point.y + length * $math.sin(angle));\n\t\t\t\t})\n\n\t\t\t\tthis.toggleVisibility(tick, position, tick.get(\"minPosition\", 0), tick.get(\"maxPosition\", 1));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateBullet(bullet?: AxisBullet, position?: number, endPosition?: number) {\n\t\tif (bullet) {\n\n\t\t\tconst sprite = bullet.get(\"sprite\");\n\n\t\t\tif (sprite) {\n\n\t\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\t\tposition = 0;\n\t\t\t\t}\n\n\t\t\t\tlet location = bullet.get(\"location\", 0.5);\n\t\t\t\tif ($type.isNumber(endPosition) && endPosition != position) {\n\t\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t\t}\n\n\t\t\t\tconst point = this.positionToPoint(position);\n\n\t\t\t\tsprite.setAll({ x: point.x, y: point.y });\n\n\t\t\t\tthis.toggleVisibility(sprite, position, 0, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\n\tpublic getPoints(positionX: number, positionY: number, endPositionX: number, endPositionY: number) {\n\t\treturn this.get(\"xRenderer\")?.getPoints(positionX, positionY, endPositionX, endPositionY);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateFill(fill?: Graphics, position?: number, endPosition?: number) {\n\t\tif (fill) {\n\t\t\tif (position == null) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\t\t\tif (endPosition == null) {\n\t\t\t\tendPosition = 1;\n\t\t\t}\n\n\t\t\tconst points = this.getPoints(0, position, 1, endPosition);\n\t\t\tif (points) {\n\t\t\t\tfill.set(\"draw\", (display) => {\n\t\t\t\t\tdisplay.moveTo(points[0].x, points[0].y);\n\t\t\t\t\t$array.each(points, (point) => {\n\t\t\t\t\t\tdisplay.lineTo(point.x, point.y);\n\t\t\t\t\t})\n\t\t\t\t\tdisplay.closePath();\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns axis length in pixels.\n\t *\n\t * @return Length\n\t */\n\tpublic axisLength(): number {\n\t\treturn this.get(\"axisLength\", 60);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateTooltipBounds(_tooltip: Tooltip) {\n\n\t}\n\n\t/**\n\t * Converts relative position to pixels.\n\t *\n\t * @param   position  Position\n\t * @return            Pixels\n\t */\n\tpublic positionToCoordinate(position: number): number {\n\t\tif (this._inversed) {\n\t\t\tposition = Math.min(this._end, position);\n\t\t\treturn (this._end - position) * this._axisLength;\n\t\t}\n\t\telse {\n\t\t\tposition = Math.max(this._start, position);\n\t\t\treturn (position - this._start) * this._axisLength;\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic positionTooltip(tooltip: Tooltip, position: number) {\n\t\tconst xRenderer = this.get(\"xRenderer\");\t\t\n\t\tif(xRenderer){\n\t\t\tconst point = this.positionToPoint(position, xRenderer.axis.get(\"start\", 0));\n\t\t\tthis._positionTooltip(tooltip, point);\n\t\t}\n\t}\n}\n","import { Theme } from \"../../core/Theme\";\r\nimport { percent } from \"../../core/util/Percent\";\r\n\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport class CurveDefaultTheme extends Theme {\r\n\tprotected setupDefaultRules() {\r\n\t\tsuper.setupDefaultRules();\r\n\r\n\t\tconst r = this.rule.bind(this);\r\n\r\n\r\n\t\t/**\r\n\t\t * ========================================================================\r\n\t\t * charts/timeline\r\n\t\t * ========================================================================\r\n\t\t */\r\n\r\n\t\tr(\"SpiralChart\").setAll({\r\n\t\t\tlevelCount: 3,\r\n\t\t\tendAngle: 0,\r\n\t\t\tstartAngle: -90,\r\n\t\t\tyAxisRadius: percent(60),\r\n\t\t\tinnerRadius: percent(20)\r\n\t\t});\r\n\r\n\t\tr(\"SerpentineChart\").setAll({\r\n\t\t\tlevelCount: 3,\r\n\t\t\torientation: \"vertical\",\r\n\t\t\tstartLocation: 0,\r\n\t\t\tendLocation: 1\r\n\t\t});\r\n\r\n\t\tr(\"CurveColumnSeries\").setAll({\r\n\t\t\tclustered: true\r\n\t\t});\r\n\r\n\t\tr(\"Slice\", [\"curve\", \"column\", \"series\"]).setAll({\r\n\t\t\twidth: percent(50),\r\n\t\t\theight: percent(50)\r\n\t\t});\r\n\r\n\t\tr(\"AxisRendererCurveY\").setAll({\r\n\t\t\tminGridDistance: 20,\r\n\t\t\tinversed: false,\r\n\t\t\tcellStartLocation: 0,\r\n\t\t\tcellEndLocation: 1,\r\n\t\t\trotateLabels: false,\r\n\t\t\taxisLocation: 0.5,\r\n\t\t\taxisLength: 60\r\n\t\t});\r\n\r\n\t\tr(\"AxisRendererCurveX\").setAll({\r\n\t\t\tminGridDistance: 100,\r\n\t\t\tinversed: false,\r\n\t\t\tcellStartLocation: 0,\r\n\t\t\tcellEndLocation: 1,\r\n\t\t\trotateLabels: false\r\n\t\t});\r\n\r\n\t\tr(\"RadialLabel\", [\"circular\"]).setAll({\r\n\t\t\ttextType: \"circular\",\r\n\t\t\tpaddingTop: 1,\r\n\t\t\tpaddingRight: 0,\r\n\t\t\tpaddingBottom: 1,\r\n\t\t\tpaddingLeft: 0,\r\n\t\t\tcenterX: 0,\r\n\t\t\tcenterY: 0,\r\n\t\t\tradius: 8\r\n\t\t});\r\n\r\n\r\n\t\tr(\"AxisLabelRadial\", [\"category\"]).setAll({\r\n\t\t\ttext: \"{category}\",\r\n\t\t\tpopulateText: true\r\n\t\t});\r\n\r\n\t\tr(\"RadialLabel\", [\"radial\"]).setAll({\r\n\t\t\ttextType: \"regular\",\r\n\t\t\tcenterX: 0,\r\n\t\t\ttextAlign: \"right\"\r\n\t\t});\r\n\t}\r\n}\r\n","import type { AxisRendererCurveX } from \"./AxisRendererCurveX\";\nimport type { AxisRendererCurveY } from \"./AxisRendererCurveY\";\nimport type { Axis } from \"../xy/axes/Axis\";\nimport type { XYSeries } from \"../xy/series/XYSeries\";\nimport type { CurveCursor } from \"./CurveCursor\";\nimport type { CurveColumnSeries } from \"./CurveColumnSeries\";\nimport type { IPoint } from \"../../core/util/IPoint\";\n\nimport { CurveDefaultTheme } from \"./CurveDefaultTheme\";\nimport { XYChart, IXYChartPrivate, IXYChartSettings } from \"../xy/XYChart\";\nimport { p50 } from \"../../core/util/Percent\";\nimport { Container } from \"../../core/render/Container\";\nimport { Graphics } from \"../../core/render/Graphics\";\n\n\nexport interface ICurveChartSettings extends IXYChartSettings {\n\n\t/**\n\t * [[CurveCursor]] instance.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/timeline-chart/#Cursor} for more info\n\t */\n\tcursor?: CurveCursor;\n\n}\n\nexport interface ICurveChartPrivate extends IXYChartPrivate {\n\n}\n\n/**\n * Base chart for a Timeline chart.\n *\n * For this chart to work, it needs curve points provided via renderer of\n * its X-axis.\n * \n * Note: it is an experimental chart type and does not support all the\n * functionality of the [[XYChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/timeline/} for more info\n * @since 5.12.0\n * @important\n */\nexport class CurveChart extends XYChart {\n\n\t/**\n\t * [[Container]] where chart elements go.\n\t *\n\t * @default Container.new()\n\t */\n\tpublic readonly curveContainer = this.plotContainer.children.push(Container.new(this._root, { x: p50, y: p50 }));\n\n\tpublic static className: string = \"CurveChart\";\n\tpublic static classNames: Array<string> = XYChart.classNames.concat([CurveChart.className]);\n\n\tdeclare public _settings: ICurveChartSettings;\n\tdeclare public _privateSettings: ICurveChartPrivate;\n\n\tdeclare public _seriesType: CurveColumnSeries;\n\n\n\tprotected _afterNew() {\n\t\tthis._defaultThemes.push(CurveDefaultTheme.new(this._root));\n\n\t\tsuper._afterNew();\n\n\t\tconst curveContainer = this.curveContainer;\n\t\tconst gridContainer = this.gridContainer;\n\t\tconst topGridContainer = this.topGridContainer;\n\t\tconst seriesContainer = this.seriesContainer;\n\t\tconst bulletsContainer = this.bulletsContainer;\n\n\t\tcurveContainer.children.pushAll([gridContainer, seriesContainer, topGridContainer, bulletsContainer]);\n\n\t\tseriesContainer.set(\"mask\", Graphics.new(this._root, {}));\n\t\tgridContainer.set(\"mask\", Graphics.new(this._root, {}));\n\n\t\tthis._disposers.push(this.plotContainer.events.on(\"boundschanged\", () => {\n\t\t\tthis._updateMasks();\n\t\t}));\n\t}\n\n\tprotected _maskGrid() {\n\n\t}\n\n\n\tprotected _addCursor(cursor: CurveCursor) {\n\t\tthis.curveContainer.children.push(cursor);\n\t}\n\n\n\t// do not delete\n\tpublic _updateMasks() {\n\n\t\tthis.xAxes.each((axis) => {\n\t\t\tconst renderer = axis.get(\"renderer\") as AxisRendererCurveX;\n\t\t\trenderer._updateLayout();\n\t\t})\n\n\t\tthis._updateMask(this.seriesContainer);\n\t\tthis._updateMask(this.gridContainer);\n\n\t\tthis.series.each((series) => {\n\t\t\tif ((series as XYSeries).get(\"maskBullets\")) {\n\t\t\t\tthis._updateMask(series.bulletsContainer);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tseries.bulletsContainer.set(\"mask\", undefined);\n\t\t\t}\n\t\t})\n\n\t\tthis.yAxes.each((axis) => {\n\t\t\taxis.markDirtySize();\n\t\t})\t\t\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic _updateMask(container: Container) {\n\n\t\tconst mask = container.get(\"mask\");\n\t\tif (mask) {\n\t\t\tconst xAxis = this.xAxes.getIndex(0);\n\t\t\tconst yAxis = this.yAxes.getIndex(0);\n\t\t\tif (xAxis && yAxis) {\n\t\t\t\tconst renderer = xAxis.get(\"renderer\") as AxisRendererCurveX;\n\t\t\t\tconst points = renderer.getPoints(xAxis.get(\"start\", 0), yAxis.get(\"start\", 0), xAxis.get(\"end\", 1), yAxis.get(\"end\", 1));\n\n\t\t\t\tmask.set(\"draw\", (display) => {\n\t\t\t\t\tdisplay.moveTo(points[0].x, points[0].y);\n\t\t\t\t\tfor (let i = 1; i < points.length; i++) {\n\t\t\t\t\t\tdisplay.lineTo(points[i].x, points[i].y);\n\t\t\t\t\t}\n\t\t\t\t\tdisplay.closePath();\n\t\t\t\t})\n\n\t\t\t\txAxis.markDirtySize();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic processAxis(axis: Axis<AxisRendererCurveY | AxisRendererCurveX>) {\n\t\tthis.curveContainer.children.unshift(axis);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic inPlot(_point: IPoint): boolean {\t\t\n\t\treturn true;\n\t}\n\n\tprotected _tooltipToLocal(point: IPoint): IPoint {\n\t\treturn this.curveContainer._display.toLocal(point);\n\t}\n\n\tprotected _handlePinch() {\n\n\t}\n}\n","import { CurveChart, ICurveChartPrivate, ICurveChartSettings } from \"./CurveChart\";\r\nimport { p50, Percent } from \"../../core/util/Percent\";\r\n\r\nimport type { CurveColumnSeries } from \"./CurveColumnSeries\";\r\nimport type { AxisRendererCurveY } from \"./AxisRendererCurveY\";\r\nimport type { IPoint } from \"../../core/util/IPoint\";\r\nimport type { AxisRendererCurveX } from \"./AxisRendererCurveX\";\r\n\r\nimport * as $math from \"../../core/util/Math\";\r\nimport * as $utils from \"../../core/util/Utils\";\r\n\r\n\r\nexport interface ISerpentineChartSettings extends ICurveChartSettings {\r\n\r\n\t/**\r\n\t * Orientation of the serpatine.\r\n\t *\r\n\t * @default \"vertical\"\r\n\t */\r\n\torientation?: \"horizontal\" | \"vertical\";\r\n\r\n\t/**\r\n\t * Number of levels in the chart.\r\n\t *\r\n\t * @default 3\r\n\t */\r\n\tlevelCount?: number;\r\n\r\n\t/**\r\n\t * Radius of the Y-axis in `Percent`.\r\n\t *\r\n\t * @default 50%\r\n\t */\r\n\tyAxisRadius?: Percent;\r\n\r\n\t/**\r\n\t * Relative location (0-1) of the start postion.\r\n\t *\r\n\t * @defult 0\r\n\t */\r\n\tstartLocation?: number;\r\n\r\n\t/**\r\n\t * Relative location (0-1) of the end position.\r\n\t *\r\n\t * @defult 1\r\n\t */\r\n\tendLocation?: number;\r\n\r\n}\r\n\r\nexport interface ISerpentineChartPrivate extends ICurveChartPrivate {\r\n}\r\n\r\n/**\r\n * A Serpentine chart.\r\n *\r\n * For this chart to work, it needs curve points provided via renderer of\r\n * its X-axis.\r\n * \r\n * Note: it is an experimental chart type and does not support all the\r\n * functionality of the [[XYChart]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/timeline/} for more info\r\n * @since 5.12.0\r\n * @important\r\n */\r\nexport class SerpentineChart extends CurveChart {\r\n\r\n\tpublic static className: string = \"SerpentineChart\";\r\n\tpublic static classNames: Array<string> = CurveChart.classNames.concat([SerpentineChart.className]);\r\n\r\n\tdeclare public _settings: ISerpentineChartSettings;\r\n\tdeclare public _privateSettings: ISerpentineChartPrivate;\r\n\r\n\tdeclare public _seriesType: CurveColumnSeries;\r\n\r\n\r\n\tpublic _prepareChildren(): void {\r\n\t\tsuper._prepareChildren();\r\n\r\n\t\tif (this.isDirty(\"levelCount\") || this.isDirty(\"orientation\")) {\r\n\t\t\tthis._updateMasks();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic _updateMasks(): void {\r\n\t\tconst levelCount = this.get(\"levelCount\", 1) - 1;\r\n\r\n\t\tlet w = this.plotContainer.innerWidth();\r\n\t\tlet h = this.plotContainer.innerHeight();\r\n\r\n\t\tlet points: IPoint[] = [];\r\n\t\tlet radius: number;\r\n\r\n\r\n\t\tif (this.get(\"orientation\") == \"vertical\") {\r\n\t\t\tradius = Math.min(h / (levelCount + 1) / 2, w / 3);\t\t\r\n\t\t\th = Math.min(radius * (levelCount + 1) * 2, h);\t\t\t\t\r\n\r\n\t\t\tconst startLocation = this.get(\"startLocation\", 0);\r\n\t\t\tconst endLocation = this.get(\"endLocation\", 1);\r\n\r\n\t\t\tfor (let i = 0; i <= levelCount; i++) {\r\n\t\t\t\tif (i % 2 === 0) {\r\n\t\t\t\t\tif (i === 0) {\r\n\t\t\t\t\t\tpoints.push({ x: -w / 2 + (w - radius * 2) * startLocation, y: -h / 2 + h / (levelCount + 1) * i })\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: -w / 2 + radius, y: -h / 2 + h / (levelCount + 1) * i })\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (i === levelCount) {\r\n\t\t\t\t\t\tpoints.push({ x: w / 2 - radius - (w - radius * 2) * (1 - endLocation), y: -h / 2 + h / (levelCount + 1) * i })\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: w / 2 - 2 * radius, y: -h / 2 + h / (levelCount + 1) * i })\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet centerPoint = { x: w / 2 - 2 * radius, y: -h / 2 + h / (levelCount + 1) * (i + 0.5) }\r\n\t\t\t\t\tif (i < levelCount) {\r\n\t\t\t\t\t\tfor (let i = 1; i < 50; i++) {\r\n\t\t\t\t\t\t\tlet angle = -90 + i / 50 * 180;\r\n\t\t\t\t\t\t\tpoints.push({ x: centerPoint.x + radius * $math.cos(angle), y: centerPoint.y + radius * $math.sin(angle) });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tpoints.push({ x: w / 2 - 2 * radius, y: -h / 2 + h / (levelCount + 1) * i })\r\n\r\n\t\t\t\t\tif (i === levelCount) {\r\n\t\t\t\t\t\tpoints.push({ x: -w / 2 + (w - radius * 2) * (1 - endLocation), y: -h / 2 + h / (levelCount + 1) * i })\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: -w / 2 + radius, y: -h / 2 + h / (levelCount + 1) * i })\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet centerPoint = { x: -w / 2 + radius, y: -h / 2 + h / (levelCount + 1) * (i + 0.5) }\r\n\r\n\t\t\t\t\tif (i < levelCount) {\r\n\t\t\t\t\t\tfor (let i = 1; i < 50; i++) {\r\n\t\t\t\t\t\t\tlet angle = -90 - i / 50 * 180;\r\n\t\t\t\t\t\t\tpoints.push({ x: centerPoint.x + radius * $math.cos(angle), y: centerPoint.y + radius * $math.sin(angle) });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tradius = Math.min(w / (levelCount + 1) / 2, h / 3);\t\t\r\n\t\t\tw = Math.min(radius * (levelCount + 1) * 2, w);\t\r\n\r\n\t\t\tconst startLocation = this.get(\"startLocation\", 0);\r\n\t\t\tconst endLocation = this.get(\"endLocation\", 1);\r\n\r\n\t\t\tfor (let i = 0; i <= levelCount; i++) {\r\n\t\t\t\tif (i % 2 === 0) {\r\n\t\t\t\t\tif (i === 0) {\r\n\t\t\t\t\t\tpoints.push({ y: -h / 2 + (h - radius * 2) * startLocation, x: -w / 2 + w / (levelCount + 1) * i })\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ y: -h / 2 + radius, x: -w / 2 + w / (levelCount + 1) * i })\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (i === levelCount) {\r\n\t\t\t\t\t\tpoints.push({ y: h / 2 - radius - (h - radius * 2) * (1 - endLocation), x: -w / 2 + w / (levelCount + 1) * i })\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ y: h / 2 - 2 * radius, x: -w / 2 + w / (levelCount + 1) * i })\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet centerPoint = { y: h / 2 - 2 * radius, x: -w / 2 + w / (levelCount + 1) * (i + 0.5) }\r\n\t\t\t\t\tif (i < levelCount) {\r\n\t\t\t\t\t\tfor (let i = 1; i < 50; i++) {\r\n\t\t\t\t\t\t\tlet angle = -90 + i / 50 * 180;\r\n\t\t\t\t\t\t\tpoints.push({ y: centerPoint.y + radius * $math.cos(angle), x: centerPoint.x + radius * $math.sin(angle) });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tpoints.push({ y: h / 2 - 2 * radius, x: -w / 2 + w / (levelCount + 1) * i })\r\n\r\n\t\t\t\t\tif (i === levelCount) {\r\n\t\t\t\t\t\tpoints.push({ y: -h / 2 + (h - radius * 2) * (1 - endLocation), x: -w / 2 + w / (levelCount + 1) * i })\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ y: -h / 2 + radius, x: -w / 2 + w / (levelCount + 1) * i })\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet centerPoint = { y: -h / 2 + radius, x: -w / 2 + w / (levelCount + 1) * (i + 0.5) }\r\n\r\n\t\t\t\t\tif (i < levelCount) {\r\n\t\t\t\t\t\tfor (let i = 1; i < 50; i++) {\r\n\t\t\t\t\t\t\tlet angle = -90 - i / 50 * 180;\r\n\t\t\t\t\t\t\tpoints.push({ y: centerPoint.y + radius * $math.cos(angle), x: centerPoint.x + radius * $math.sin(angle) });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\tthis.yAxes.each((axis) => {\r\n\t\t\tconst renderer = axis.get(\"renderer\") as AxisRendererCurveY;\r\n\t\t\trenderer.set(\"axisLength\", $utils.relativeToValue(this.get(\"yAxisRadius\", p50), 2 * radius));\r\n\t\t\taxis.markDirtySize();\r\n\t\t})\r\n\r\n\t\tthis.xAxes.each((axis) => {\r\n\t\t\tconst renderer = axis.get(\"renderer\") as AxisRendererCurveX;\r\n\t\t\trenderer.setPrivate(\"autoScale\", false);\r\n\t\t\trenderer.set(\"points\", points);\r\n\t\t})\r\n\t\tsuper._updateMasks();\r\n\t}\r\n}\r\n","import { CurveChart, ICurveChartPrivate, ICurveChartSettings } from \"./CurveChart\";\r\nimport { p50, Percent } from \"../../core/util/Percent\";\r\n\r\nimport type { CurveColumnSeries } from \"./CurveColumnSeries\";\r\nimport type { AxisRendererCurveY } from \"./AxisRendererCurveY\";\r\nimport type { AxisRendererCurveX } from \"./AxisRendererCurveX\";\r\n\r\nimport * as $math from \"../../core/util/Math\";\r\nimport * as $utils from \"../../core/util/Utils\";\r\n\r\n\r\nexport interface ISpiralChartSettings extends ICurveChartSettings {\r\n\r\n\t/**\r\n\t * Numer of spiral circles.\r\n\t *\r\n\t * @default 3\r\n\t */\r\n\tlevelCount?: number;\r\n\r\n\t/**\r\n\t * y Axis radius in percent.\r\n\t *\r\n\t * @defgault 50%\r\n\t */\r\n\tyAxisRadius?: Percent;\r\n\r\n\t/**\r\n\t * Start angle of the spiral in degrees.\r\n\t *\r\n\t * @default -90\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the spiral in degrees.\r\n\t *\r\n\t * default 0\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Inner radius of the spiral in percent.\r\n\t *\r\n\t * @default 60%\r\n\t */\r\n\tinnerRadius?: Percent;\r\n\r\n}\r\n\r\nexport interface ISpiralChartPrivate extends ICurveChartPrivate {\r\n}\r\n\r\n/**\r\n * A spiral chart.\r\n * \r\n * For this chart to work, it needs curve points provided via renderer of\r\n * its X-axis.\r\n * \r\n * Note: it is an experimental chart type and does not support all the\r\n * functionality of the [[XYChart]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/timeline/} for more info\r\n * @since 5.12.0\r\n * @important\r\n */\r\nexport class SpiralChart extends CurveChart {\r\n\r\n\tpublic static className: string = \"SpiralChart\";\r\n\tpublic static classNames: Array<string> = CurveChart.classNames.concat([SpiralChart.className]);\r\n\r\n\tdeclare public _settings: ISpiralChartSettings;\r\n\tdeclare public _privateSettings: ISpiralChartPrivate;\r\n\r\n\tdeclare public _seriesType: CurveColumnSeries;\r\n\r\n\r\n\tpublic _prepareChildren(): void {\r\n\t\tsuper._prepareChildren();\r\n\r\n\t\tif (this.isDirty(\"levelCount\")) {\r\n\t\t\tthis._updateMasks();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic _updateMasks(): void {\r\n\r\n\t\tlet w = this.plotContainer.innerWidth();\r\n\t\tlet h = this.plotContainer.innerHeight();\r\n\r\n\t\tlet radius: number = Math.min(w, h) / 2;\r\n\t\tlet innerRadius = $utils.relativeToValue(this.get(\"innerRadius\", 0), radius);\r\n\t\tlet radiusStep = (radius - innerRadius) / this.get(\"levelCount\", 1);\r\n\t\tlet yAxisRadius: number = $utils.relativeToValue(this.get(\"yAxisRadius\", p50), radiusStep);\r\n\r\n\t\tconst points = $math.spiralPoints(0, 0, radius, radius, innerRadius, 20, radiusStep, this.get(\"startAngle\", 0), this.get(\"endAngle\", 360));\r\n\r\n\t\tthis.yAxes.each((axis) => {\r\n\t\t\tconst renderer = axis.get(\"renderer\") as AxisRendererCurveY;\r\n\t\t\trenderer.set(\"axisLength\", yAxisRadius);\r\n\t\t\taxis.markDirtySize();\r\n\t\t})\r\n\r\n\t\tthis.xAxes.each((axis) => {\r\n\t\t\tconst renderer = axis.get(\"renderer\") as AxisRendererCurveX;\r\n\t\t\trenderer.setPrivate(\"autoScale\", false);\r\n\t\t\trenderer.set(\"points\", points);\r\n\t\t})\r\n\t\tsuper._updateMasks();\r\n\t}\r\n}\r\n","import type { DataItem } from \"../../core/render/Component\";\nimport type { IPoint } from \"../../core/util/IPoint\";\nimport type { AxisRendererCurveX } from \"./AxisRendererCurveX\";\nimport type { Bullet } from \"../../core/render/Bullet\";\nimport type { CurveChart } from \"./CurveChart\";\n\nimport { BaseColumnSeries, IBaseColumnSeriesPrivate, IBaseColumnSeriesSettings, IBaseColumnSeriesDataItem, IBaseColumnSeriesAxisRange } from \"../xy/series/BaseColumnSeries\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport { Template } from \"../../core/util/Template\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { Polygon } from \"../../core/render/Polygon\";\n\nimport * as $math from \"../../core/util/Math\";\nimport * as $utils from \"../../core/util/Utils\";\n\n\nexport interface ICurveColumnSeriesDataItem extends IBaseColumnSeriesDataItem {\n}\n\nexport interface ICurveColumnSeriesSettings extends IBaseColumnSeriesSettings {\n}\n\nexport interface ICurveColumnSeriesPrivate extends IBaseColumnSeriesPrivate {\n}\n\nexport interface ICurveColumnSeriesAxisRange extends IBaseColumnSeriesAxisRange {\n\n\t/**\n\t * List of columns in a range.\n\t */\n\tcolumns: ListTemplate<Polygon>\n\n}\n\n/**\n * A column series for use in a [[CurveChart]], [[SerpetineChart]], or\n * a [[SpiralChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/timeline/} for more info\n * @since 5.12.0\n * @important\n */\nexport class CurveColumnSeries extends BaseColumnSeries {\n\n\tdeclare public _settings: ICurveColumnSeriesSettings;\n\tdeclare public _privateSettings: ICurveColumnSeriesPrivate;\n\tdeclare public _dataItemSettings: ICurveColumnSeriesDataItem;\n\tdeclare public _axisRangeType: ICurveColumnSeriesAxisRange;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeColumn(dataItem: DataItem<this[\"_dataItemSettings\"]>, listTemplate: ListTemplate<Polygon>): Polygon {\n\t\tconst column = this.mainContainer.children.push(listTemplate.make());\n\t\tcolumn._setDataItem(dataItem);\n\t\tlistTemplate.push(column);\n\t\treturn column;\n\t}\n\n\t/**\n\t * A [[TemplateList]] of all columns in series.\n\t *\n\t * `columns.template` can be used to set default settings for all columns,\n\t * or to change on existing ones.\n\t *\n\t * @default new ListTemplate<Polygon>\n\t */\n\tpublic readonly columns: ListTemplate<Polygon> = this.addDisposer(new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => Polygon._new(this._root, {\n\t\t\tposition: \"absolute\",\n\t\t\tthemeTags: $utils.mergeTags(this.columns.template.get(\"themeTags\", []), [\"curve\", \"series\", \"column\"])\n\t\t}, [this.columns.template])\n\t));\n\n\tpublic static className: string = \"CurveColumnSeries\";\n\tpublic static classNames: Array<string> = BaseColumnSeries.classNames.concat([CurveColumnSeries.className]);\n\n\t/**\n\t * A chart series belongs to.\n\t */\n\tdeclare public chart: CurveChart | undefined;\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis.set(\"maskContent\", false);\n\t\tthis.bulletsContainer.set(\"maskContent\", false);\n\t\tthis.bulletsContainer.set(\"mask\", Graphics.new(this._root, {}));\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getPoint(positionX: number, positionY: number): IPoint {\n\t\tconst xAxis = this.get(\"xAxis\");\n\t\tconst rendererX = xAxis.get(\"renderer\") as AxisRendererCurveX;\n\t\treturn rendererX.positionToPoint(positionX, positionY);\n\t}\n\n\tprotected _updateSeriesGraphics(dataItem: DataItem<this[\"_dataItemSettings\"]>, graphics: Graphics, l: number, r: number, t: number, b: number) {\n\n\t\tgraphics.setPrivate(\"visible\", true);\n\n\t\tdataItem.setRaw(\"left\", l);\n\t\tdataItem.setRaw(\"right\", r);\n\t\tdataItem.setRaw(\"top\", t);\n\t\tdataItem.setRaw(\"bottom\", b);\n\n\t\tconst xAxis = this.get(\"xAxis\");\n\t\tconst rendererX = xAxis.get(\"renderer\") as AxisRendererCurveX;\n\n\t\tconst yAxis = this.get(\"yAxis\");\n\t\tconst start = yAxis.get(\"start\", 0);\n\t\tconst end = yAxis.get(\"end\", 1);\n\n\t\tt = $math.fitToRange(t, start, end);\n\t\tb = $math.fitToRange(b, start, end);\n\n\t\tconst points = rendererX.getPoints(l, t, r, b);\n\n\t\tconst polygon = graphics as Polygon;\n\n\t\tpolygon.set(\"points\", points);\n\t}\n\n\tprotected _shouldInclude(position: number): boolean {\n\t\tconst xAxis = this.get(\"xAxis\");\n\t\tif (position < xAxis.get(\"start\", 0) || position > xAxis.get(\"end\", 1)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprotected _shouldShowBullet(positionX: number, _positionY: number): boolean {\n\t\tconst xAxis = this.get(\"xAxis\");\n\t\tif (positionX < xAxis.get(\"start\", 0) || positionX > xAxis.get(\"end\", 1)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this._showBullets;\n\t}\n\n\tpublic _positionBullet(bullet: Bullet) {\n\n\t\tlet sprite = bullet.get(\"sprite\");\n\t\tif (sprite) {\n\t\t\tconst dataItem = sprite.dataItem as any;\n\n\t\t\tconst diLocationX = dataItem.get(\"locationX\", 0.5);\n\t\t\tconst diLocationY = dataItem.get(\"locationY\", 0.5);\n\n\t\t\tconst locationX = bullet.get(\"locationX\", diLocationX);\n\t\t\tconst locationY = bullet.get(\"locationY\", diLocationY);\n\n\t\t\tconst series = dataItem.component;\n\n\t\t\tconst xAxis = series.get(\"xAxis\");\n\t\t\tconst yAxis = series.get(\"yAxis\");\n\n\t\t\tlet positionX = 0;\n\t\t\tlet vcx = series.get(\"vcx\", 1);\n\t\t\tlet vcy = series.get(\"vcy\", 1);\n\n\t\t\tif (this.get(\"openValueXField\")) {\n\t\t\t\tconst p0 = xAxis.getDataItemPositionX(dataItem, series._xOpenField, diLocationX, vcx);\n\t\t\t\tconst p1 = xAxis.getDataItemPositionX(dataItem, series._xField, diLocationX, vcx);\n\t\t\t\tpositionX = p0 + (p1 - p0) * locationX;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpositionX = xAxis.getDataItemPositionX(dataItem, series._xField, locationX, vcx);\n\t\t\t}\n\t\t\tlet positionY = 0;\n\t\t\tif (this.get(\"openValueYField\")) {\n\t\t\t\tconst p0 = yAxis.getDataItemPositionY(dataItem, series._yOpenField, diLocationY, vcy);\n\t\t\t\tconst p1 = yAxis.getDataItemPositionY(dataItem, series._yField, diLocationY, vcy);\n\t\t\t\tpositionY = p0 + (p1 - p0) * locationY;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpositionY = yAxis.getDataItemPositionY(dataItem, series._yField, locationY, vcy);\n\t\t\t}\n\n\t\t\tif (series._shouldShowBullet(positionX, positionY)) {\n\t\t\t\tsprite.setPrivate(\"visible\", true);\n\n\t\t\t\tconst point = series.getPoint(positionX, positionY);\n\n\t\t\t\tsprite.setAll({\n\t\t\t\t\tx: point.x,\n\t\t\t\t\ty: point.y\n\t\t\t\t})\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsprite.setPrivate(\"visible\", false);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _handleMaskBullets() {\n\n\t}\n\n\tpublic _updateChildren(): void {\n\t\tsuper._updateChildren();\n\t\tif(!this.get(\"maskBullets\")) {\n\t\t\tthis.bulletsContainer.remove(\"mask\");\n\t\t}\t\n\t}\n\n\tprotected _processAxisRange(axisRange: this[\"_axisRangeType\"]) {\n\t\tsuper._processAxisRange(axisRange);\n\t\taxisRange.columns = new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => Polygon._new(this._root, {\n\t\t\t\tposition: \"absolute\",\n\t\t\t\tthemeTags: $utils.mergeTags(axisRange.columns.template.get(\"themeTags\", []), [\"curves\", \"series\", \"column\"]),\n\t\t\t}, [this.columns.template, axisRange.columns.template])\n\t\t);\n\t}\n}\n","import type { IPoint } from \"../../core/util/IPoint\";\r\nimport type { AxisRendererCurveX } from \"./AxisRendererCurveX\";\r\nimport type { Bullet } from \"../../core/render/Bullet\";\r\nimport type { CurveChart } from \"./CurveChart\";\r\n\r\nimport { Graphics } from \"../../core/render/Graphics\";\r\nimport { LineSeries, ILineSeriesPrivate, ILineSeriesSettings, ILineSeriesDataItem, ILineSeriesAxisRange } from \"../xy/series/LineSeries\";\r\n\r\n\r\nexport interface ICurveLineSeriesDataItem extends ILineSeriesDataItem {\r\n}\r\n\r\nexport interface ICurveLineSeriesSettings extends ILineSeriesSettings {\r\n}\r\n\r\nexport interface ICurveLineSeriesPrivate extends ILineSeriesPrivate {\r\n}\r\n\r\nexport interface ICurveLineSeriesAxisRange extends ILineSeriesAxisRange {\r\n}\r\n\r\n/**\r\n * A line series for use in a [[CurveChart]], [[SerpetineChart]], or\r\n * a [[SpiralChart]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/timeline/} for more info\r\n * @since 5.12.0\r\n * @important\r\n */\r\nexport class CurveLineSeries extends LineSeries {\r\n\r\n\tdeclare public _settings: ICurveLineSeriesSettings;\r\n\tdeclare public _privateSettings: ICurveLineSeriesPrivate;\r\n\tdeclare public _dataItemSettings: ICurveLineSeriesDataItem;\r\n\tdeclare public _axisRangeType: ICurveLineSeriesAxisRange;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tdeclare public chart: CurveChart | undefined;\r\n\r\n\tpublic static className: string = \"CurveLineSeries\";\r\n\tpublic static classNames: Array<string> = LineSeries.classNames.concat([CurveLineSeries.className]);\r\n\r\n\tprotected _afterNew() {\r\n\t\tsuper._afterNew();\r\n\t\tthis.set(\"maskContent\", false);\r\n\t\tthis.bulletsContainer.set(\"maskContent\", false);\r\n\t\tthis.bulletsContainer.set(\"mask\", Graphics.new(this._root, {}));\r\n\t}\r\n\r\n\tprotected _handleMaskBullets() {\r\n\r\n\t}\r\n\r\n\tpublic _updateChildren(): void {\r\n\t\tsuper._updateChildren();\r\n\t\tif (!this.get(\"maskBullets\")) {\r\n\t\t\tthis.bulletsContainer.remove(\"mask\");\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getPoint(positionX: number, positionY: number): IPoint {\r\n\r\n\t\tconst xRenderer = this.get(\"xAxis\").get(\"renderer\") as AxisRendererCurveX;\r\n\t\treturn xRenderer.positionToPoint(positionX, positionY);\r\n\t}\r\n\r\n\tprotected _shouldInclude(position: number): boolean {\r\n\t\tconst xAxis = this.get(\"xAxis\");\r\n\t\tif (position < xAxis.get(\"start\", 0) || position > xAxis.get(\"end\", 1)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprotected _shouldShowBullet(positionX: number, _positionY: number): boolean {\r\n\t\tconst xAxis = this.get(\"xAxis\");\r\n\t\tif (positionX < xAxis.get(\"start\", 0) || positionX > xAxis.get(\"end\", 1)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn this._showBullets;\r\n\t}\r\n\r\n\tpublic _positionBullet(bullet: Bullet) {\r\n\r\n\t\tlet sprite = bullet.get(\"sprite\");\r\n\t\tif (sprite) {\r\n\t\t\tconst dataItem = sprite.dataItem as any;\r\n\r\n\t\t\tconst diLocationX = dataItem.get(\"locationX\", 0.5);\r\n\t\t\tconst diLocationY = dataItem.get(\"locationY\", 0.5);\r\n\r\n\t\t\tconst locationX = bullet.get(\"locationX\", diLocationX);\r\n\t\t\tconst locationY = bullet.get(\"locationY\", diLocationY);\r\n\r\n\t\t\tconst series = dataItem.component;\r\n\r\n\t\t\tconst xAxis = series.get(\"xAxis\");\r\n\t\t\tconst yAxis = series.get(\"yAxis\");\r\n\r\n\t\t\tlet positionX = 0;\r\n\t\t\tlet vcx = series.get(\"vcx\", 1);\r\n\t\t\tlet vcy = series.get(\"vcy\", 1);\r\n\r\n\t\t\tif (this.get(\"openValueXField\")) {\r\n\t\t\t\tconst p0 = xAxis.getDataItemPositionX(dataItem, series._xOpenField, diLocationX, vcx);\r\n\t\t\t\tconst p1 = xAxis.getDataItemPositionX(dataItem, series._xField, diLocationX, vcx);\r\n\t\t\t\tpositionX = p0 + (p1 - p0) * locationX;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpositionX = xAxis.getDataItemPositionX(dataItem, series._xField, locationX, vcx);\r\n\t\t\t}\r\n\t\t\tlet positionY = 0;\r\n\t\t\tif (this.get(\"openValueYField\")) {\r\n\t\t\t\tconst p0 = yAxis.getDataItemPositionY(dataItem, series._yOpenField, diLocationY, vcy);\r\n\t\t\t\tconst p1 = yAxis.getDataItemPositionY(dataItem, series._yField, diLocationY, vcy);\r\n\t\t\t\tpositionY = p0 + (p1 - p0) * locationY;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpositionY = yAxis.getDataItemPositionY(dataItem, series._yField, locationY, vcy);\r\n\t\t\t}\r\n\r\n\t\t\tif (series._shouldShowBullet(positionX, positionY)) {\r\n\t\t\t\tsprite.setPrivate(\"visible\", true);\r\n\r\n\t\t\t\tconst point = series.getPoint(positionX, positionY);\r\n\r\n\t\t\t\tsprite.setAll({\r\n\t\t\t\t\tx: point.x,\r\n\t\t\t\t\ty: point.y\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsprite.setPrivate(\"visible\", false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","import type { IPoint } from \"../../core/util/IPoint\";\nimport type { Tooltip } from \"../../core/render/Tooltip\";\nimport type { CurveChart } from \"./CurveChart\";\nimport type { AxisRendererCurveX } from \"./AxisRendererCurveX\";\nimport type { AxisRendererCurveY } from \"./AxisRendererCurveY\";\nimport type { Axis } from \"../xy/axes/Axis\";\n\nimport { XYCursor, IXYCursorSettings, IXYCursorPrivate, IXYCursorEvents } from \"../xy/XYCursor\";\n\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $array from \"../../core/util/Array\";\n\nexport interface ICurveCursorSettings extends IXYCursorSettings {\n\n\t/**\n\t * A target X-axis.\n\t * \n\t * Differently from the `XYChart`, this setting is required for cursor to work.\n\t */\n\txAxis: Axis<AxisRendererCurveX>;\n\n\t/**\n\t * A target Y-axis.\n\t * \n\t * Differently from the `XYChart`, this setting is required for cursor to work.\n\t */\n\tyAxis: Axis<AxisRendererCurveY>;\n\n}\n\nexport interface ICurveCursorPrivate extends IXYCursorPrivate {\n}\n\nexport interface ICurveCursorEvents extends IXYCursorEvents {\n}\n\n/**\n * A chart cursor for use in a [[CurveChart]], [[SerpetineChart]], or\n * a [[SpiralChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/timeline/} for more info\n * @since 5.12.0\n * @important\n */\nexport class CurveCursor extends XYCursor {\n\tpublic static className: string = \"CurveCursor\";\n\tpublic static classNames: Array<string> = XYCursor.classNames.concat([CurveCursor.className]);\n\n\tdeclare public _settings: ICurveCursorSettings;\n\tdeclare public _privateSettings: ICurveCursorPrivate;\n\tdeclare public _events: ICurveCursorEvents;\n\n\t/**\n\t * A chart cursor is attached to.\n\t */\n\tdeclare public chart: CurveChart | undefined;\n\n\tprotected _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"curve\", \"cursor\"]);\n\n\t\tsuper._afterNew();\n\t}\n\n\tprotected _handleXLine() {\n\n\t}\n\n\tprotected _handleYLine() {\n\n\t}\n\n\tprotected _getPosition(point: IPoint): IPoint {\n\t\tconst xRenderer = this.get(\"xAxis\").get(\"renderer\") as AxisRendererCurveX;\n\t\treturn xRenderer.pointToPosition(point);\n\t}\n\n\tprotected _getPoint(positionX: number, positionY: number): IPoint {\n\t\tconst xRenderer = this.get(\"xAxis\").get(\"renderer\") as AxisRendererCurveX;\n\t\treturn xRenderer.positionToPoint(positionX, positionY);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLayout() {\n\n\t}\n\n\n\tprotected _updateLines(x: number, y: number) {\n\t\tif (!this._tooltipX) {\n\t\t\tthis._drawXLine(x, y);\n\t\t}\n\t\tif (!this._tooltipY) {\n\t\t\tthis._drawYLine(x, y);\n\t\t}\n\t}\n\n\tprotected _drawXLine(_x: number, _y: number) {\n\t\tconst xAxis = this.get(\"xAxis\");\n\t\tconst yAxis = this.get(\"yAxis\");\n\t\tconst renderer = xAxis.get(\"renderer\");\n\t\tconst position = renderer.toAxisPosition(this.getPrivate(\"positionX\", 0));\n\t\tconst p0 = renderer.positionToPoint(position, yAxis.get(\"start\", 0));\n\t\tconst p1 = renderer.positionToPoint(position, yAxis.get(\"end\", 1));\n\n\t\tthis.lineX.set(\"draw\", (display) => {\n\t\t\tdisplay.moveTo(p0.x, p0.y);\n\t\t\tdisplay.lineTo(p1.x, p1.y);\n\t\t})\n\n\t}\n\n\tprotected _drawYLine(_x: number, _y: number) {\n\t\tconst xAxis = this.get(\"xAxis\");\n\t\tconst yAxis = this.get(\"yAxis\");\n\t\tconst renderer = yAxis.get(\"renderer\");\n\t\tconst position = renderer.toAxisPosition(this.getPrivate(\"positionY\", 0));\n\n\n\t\tconst points = renderer.getPoints(xAxis.get(\"start\", 0), position, xAxis.get(\"end\", 1), position);\n\t\tif (points) {\n\t\t\tif (position > yAxis.get(\"start\", 0) && position < yAxis.get(\"end\", 1)) {\n\t\t\t\tthis.lineY.set(\"draw\", (display) => {\n\t\t\t\t\tif (points.length > 0) {\n\t\t\t\t\t\tdisplay.moveTo(points[0].x, points[0].y);\n\t\t\t\t\t\t$array.each(points, (point) => {\n\t\t\t\t\t\t\tdisplay.lineTo(point.x, point.y);\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.lineY.set(\"draw\", (display) => {\n\t\t\t\t\tdisplay.clear();\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _updateXLine(tooltip: Tooltip) {\n\t\tlet point = tooltip.get(\"pointTo\");\n\t\tif (point) {\n\t\t\tthis._drawXLine(point.x, point.y);\n\t\t}\n\t}\n\n\tprotected _updateYLine(tooltip: Tooltip) {\n\t\tlet point = tooltip.get(\"pointTo\")\n\t\tif (point) {\n\t\t\tthis._drawYLine(point.x, point.y);\n\t\t}\n\t}\n\n\tprotected _inPlot(): boolean {\n\t\tconst chart = this.chart;\n\n\t\tif (chart) {\n\n\t\t}\n\t\treturn true;\n\t}\n\n\tprotected _updateSelection() {\n\t\tthis.selection.set(\"draw\", (display) => {\n\t\t\tconst behavior = this.get(\"behavior\");\n\n\t\t\tlet xAxis = this.get(\"xAxis\");\n\t\t\tlet yAxis = this.get(\"yAxis\");\n\n\t\t\tlet downPositionX = xAxis.toAxisPosition(this.getPrivate(\"downPositionX\", 0));\n\t\t\tlet downPositionY = yAxis.toAxisPosition(this.getPrivate(\"downPositionY\", 0));\n\n\t\t\tlet positionX = xAxis.toAxisPosition(this.getPrivate(\"positionX\", 0));\n\t\t\tlet positionY = yAxis.toAxisPosition(this.getPrivate(\"positionY\", 0));\n\n\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\") {\n\t\t\t\tdownPositionY = yAxis.get(\"start\", 0);\n\t\t\t\tpositionY = yAxis.get(\"end\", 1);\n\t\t\t}\n\t\t\telse if (behavior == \"zoomY\" || behavior == \"selectY\") {\n\t\t\t\tdownPositionX = xAxis.get(\"start\", 0);\n\t\t\t\tpositionX = xAxis.get(\"end\", 1);\n\t\t\t}\n\n\t\t\tconst points = xAxis.get(\"renderer\").getPoints(downPositionX, downPositionY, positionX, positionY);\n\n\t\t\tdisplay.moveTo(points[0].x, points[0].y);\n\t\t\t$array.each(points, (point) => {\n\t\t\t\tdisplay.lineTo(point.x, point.y);\n\t\t\t})\n\t\t\tdisplay.closePath();\n\t\t})\n\t}\n}\n","import * as m from \"./../../dist/es2015/timeline.js\";\nexport const am5timeline = m;"],"names":["AxisRendererCurveX","AxisRenderer","this","addDisposer","List","Template","new","AxisLabel","_new","_root","themeTags","labels","template","get","Slice","axisFills","_afterNew","_settings","super","setPrivateRaw","setRaw","_beforeChanged","isDirty","_updateLayout","set","processAxis","axis","labelsContainer","chart","points","minX","Infinity","minY","maxX","maxY","axisLength","prevPoint","point","i","Math","min","x","y","max","hypot","pointDistance","_p","pointPostion","yAxisLenght","aw","ah","centerX","centerY","scaleX","innerWidth","scaleY","innerHeight","scale","getPrivate","display","moveTo","lineTo","_normalizedPoints","distance","prevNormalized","length","push","markDirtySize","updateGrid","grid","position","endPosition","location","toggleVisibility","p0","positionToPoint","p1","positionToAngle","toGlobalPosition","angle","totalLength","segmentLength","getPoints","positionX","positionY","endPositionX","endPositionY","yRenderer","indexStart","positionToIndex","indexEnd","indexToPosition","_handleOpposite","index","len","toAxisPosition","pointToPosition","minDistance","normalizedPoint","rendererY","doNotFix","undefined","pointOfPosition","segmentPosition","axisX","axisY","dy","updateLabel","label","count","setAll","updateTick","tick","updateBullet","bullet","sprite","updateFill","fill","yAxis","closePath","positionTooltip","tooltip","start","end","_positionTooltip","updateTooltipBounds","_tooltip","classNames","concat","className","AxisRendererCurveY","arc","AxisLabelRadial","setPrivate","_changed","updateLayout","_updateMasks","xRenderer","previousPoint","_point","p","positionToCoordinate","_inversed","_end","_axisLength","_start","CurveDefaultTheme","Theme","setupDefaultRules","r","rule","bind","levelCount","endAngle","startAngle","yAxisRadius","innerRadius","orientation","startLocation","endLocation","clustered","width","height","minGridDistance","inversed","cellStartLocation","cellEndLocation","rotateLabels","axisLocation","textType","paddingTop","paddingRight","paddingBottom","paddingLeft","radius","text","populateText","textAlign","CurveChart","XYChart","plotContainer","children","Container","_defaultThemes","curveContainer","gridContainer","topGridContainer","seriesContainer","bulletsContainer","pushAll","Graphics","_disposers","events","on","_maskGrid","_addCursor","cursor","xAxes","each","_updateMask","series","yAxes","container","mask","xAxis","getIndex","unshift","inPlot","_tooltipToLocal","_display","toLocal","_handlePinch","SerpentineChart","_prepareChildren","w","h","centerPoint","renderer","SpiralChart","radiusStep","CurveColumnSeries","BaseColumnSeries","Polygon","columns","makeColumn","dataItem","listTemplate","column","mainContainer","make","_setDataItem","getPoint","_updateSeriesGraphics","graphics","l","t","b","rendererX","_shouldInclude","_shouldShowBullet","_positionY","_showBullets","_positionBullet","diLocationX","diLocationY","locationX","locationY","component","vcx","vcy","getDataItemPositionX","_xOpenField","_xField","getDataItemPositionY","_yOpenField","_yField","_handleMaskBullets","_updateChildren","remove","_processAxisRange","axisRange","CurveLineSeries","LineSeries","CurveCursor","XYCursor","_handleXLine","_handleYLine","_getPosition","_getPoint","_updateLines","_tooltipX","_drawXLine","_tooltipY","_drawYLine","_x","_y","lineX","lineY","clear","_updateXLine","_updateYLine","_inPlot","_updateSelection","selection","behavior","downPositionX","downPositionY","am5timeline"],"sourceRoot":""}